[{"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Content.tsx":"1","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Footer.tsx":"2","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\GraphCard.tsx":"3","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\GraphExplanation.tsx":"4","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\GraphsPool.tsx":"5","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\HrefIcon.tsx":"6","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Search.tsx":"7","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\SearchField.tsx":"8","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Tag.tsx":"9","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\TopBar.tsx":"10","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\context\\AppContext.tsx":"11","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\layout.tsx":"12","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\page.tsx":"13","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\lib\\types.ts":"14"},{"size":1052,"mtime":1700406205305,"results":"15","hashOfConfig":"16"},{"size":1455,"mtime":1700479632667,"results":"17","hashOfConfig":"16"},{"size":1469,"mtime":1700618251184,"results":"18","hashOfConfig":"16"},{"size":1271,"mtime":1700617557009,"results":"19","hashOfConfig":"16"},{"size":421,"mtime":1700395461445,"results":"20","hashOfConfig":"16"},{"size":439,"mtime":1700618256414,"results":"21","hashOfConfig":"16"},{"size":736,"mtime":1700399586474,"results":"22","hashOfConfig":"16"},{"size":1706,"mtime":1700618243718,"results":"23","hashOfConfig":"16"},{"size":775,"mtime":1700405086503,"results":"24","hashOfConfig":"16"},{"size":470,"mtime":1700618261526,"results":"25","hashOfConfig":"16"},{"size":2951,"mtime":1700402864343,"results":"26","hashOfConfig":"16"},{"size":471,"mtime":1699891142168,"results":"27","hashOfConfig":"16"},{"size":374,"mtime":1700399941414,"results":"28","hashOfConfig":"16"},{"size":125,"mtime":1699898059485,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i6b3ew",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Content.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Footer.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\GraphCard.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\GraphExplanation.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\GraphsPool.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\HrefIcon.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Search.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\SearchField.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\Tag.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\components\\TopBar.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\context\\AppContext.tsx",["73"],[],"'use client'\r\nimport { createContext, useContext, ReactNode, useState, useEffect, useMemo, SetStateAction, Dispatch } from 'react';\r\nconst fakeData = require('../../lib/fakeData.json')\r\ninterface AppContextData {\r\n    allGraphsData: GraphData[];\r\n    allTags: Set<string>;\r\n    selectedTags: Set<string>;\r\n    toggleTag: (tag: string) => void;\r\n    filteredCards: GraphData[];\r\n    selectedCard: GraphData | null;\r\n    setSelectedCard: Dispatch<SetStateAction<GraphData | null>>;\r\n    setSearchText: Dispatch<SetStateAction<string>>;\r\n}\r\n// Create the initial context with default values\r\nconst AppContext = createContext<AppContextData | undefined>(undefined);\r\n// Create a custom hook for using the context\r\nexport const useAppContext = () => {\r\n    const context = useContext(AppContext);\r\n    if (!context) {\r\n        throw new Error('useAppContext must be used within an AppContextProvider');\r\n    }\r\n    return context;\r\n};\r\n// Create a provider component\r\ninterface AppContextProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const AppContextProvider: React.FC<AppContextProviderProps> = ({ children }) => {\r\n    const [allGraphsData, setAllGraphsData] = useState<GraphData[]>(fakeData);\r\n    const [selectedCard, setSelectedCard] = useState<GraphData | null>(null);\r\n    const [selectedTags, setSelectedTags] = useState<Set<string>>(new Set());\r\n    const [searchText, setSearchText] = useState<string>('');\r\n\r\n    /** map all tags in all graphs */\r\n    const allTags = useMemo(() => {\r\n        const set = new Set<string>();\r\n        allGraphsData.forEach(gd => {\r\n            gd.tags.forEach(t => { set.add(t) });\r\n        });\r\n        return set;\r\n    }, [allGraphsData])\r\n\r\n    /** filter cards according to search */\r\n    const filteredCards = useMemo(() => {\r\n        let filtered = allGraphsData\r\n        if (searchText) {\r\n            filtered = filtered.filter(gd => {\r\n                const res1 = gd.text.includes(searchText)\r\n                const res2 = gd.insights.some(ins => ins.includes(searchText))\r\n                return res1 && res2;\r\n            });\r\n        }\r\n        if (selectedTags.size) {\r\n            filtered = filtered.filter(gd => {\r\n                const res = gd.tags.some(tag => selectedTags.has(tag))\r\n                return res;\r\n            });\r\n        }\r\n        return filtered;\r\n    }, [selectedTags, searchText])\r\n\r\n    const toggleTag = (tag: string) => {\r\n        setSelectedTags(prev => {\r\n            const st = new Set(prev);\r\n            !st.delete(tag) && st.add(tag) // if tag is selected remove it ! else add it\r\n            return st;\r\n        })\r\n    }\r\n\r\n    const contextValue: AppContextData = {\r\n        allGraphsData,\r\n        allTags,\r\n        selectedTags,\r\n        toggleTag,\r\n        filteredCards,\r\n        selectedCard,\r\n        setSelectedCard,\r\n        setSearchText,\r\n    };\r\n\r\n    return <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>;\r\n};\r\n","C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\layout.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\app\\page.tsx",[],[],"C:\\Users\\elad\\python\\Lamas\\Code\\next-app\\lib\\types.ts",[],[],{"ruleId":"74","severity":1,"message":"75","line":61,"column":8,"nodeType":"76","endLine":61,"endColumn":34,"suggestions":"77"},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'allGraphsData'. Either include it or remove the dependency array.","ArrayExpression",["78"],{"desc":"79","fix":"80"},"Update the dependencies array to be: [allGraphsData, searchText, selectedTags]",{"range":"81","text":"82"},[2341,2367],"[allGraphsData, searchText, selectedTags]"]